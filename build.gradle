/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // Let the application know its version.
    // The version goes to the jar manifest as 'Implementation-Version'
    // and is shown on the F1 help screen.
    // (See the occurrence of ```gitVersion()``` in this file.)
    id 'com.palantir.git-version' version '0.12.3'

    // Test coverage utility
    id 'jacoco'

    // Report an error if some tests do not run
    id "io.github.qux7.testnotrunerror" version "0.1.2"

    // Print the task dependency tree by running: ```./gradlew tiTree build```
    // This plugin does not affect the build behaviour.
    id 'org.barfuin.gradle.taskinfo' version '2.2.0'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // This dependency is used by the application.
//    implementation 'com.google.guava:guava:28.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'

    annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.2.0'
}

application {
    // Define the main class for the application.
    mainClassName = 'com.github.martianch.curieux.Main'
    applicationDefaultJvmArgs = ['-Xmx8589934592']
}

sourceCompatibility = 13 // for the IDE support

compileJava {
    options.compilerArgs = [
            "--release", "8" // Avoid using Java 12 APIs
    ]
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.github.martianch.curieux.Main',
                'Implementation-Version': gitVersion()
        )
    }
}

test {
	useJUnitPlatform()
//	testLogging {
//		events "passed", "skipped", "failed"
//	}
}

// output:
// ./build/reports/jacoco/test/html/index.html
// ./build/reports/jacoco/test/html/com.github.martianch.curieux/index.html
test.finalizedBy jacocoTestReport

testnotrunerror.excludes {
    test {
        // these classes are not tests, it's ok when they are not run as test suites
        excludeClassNames = ['com.github.martianch.curieux.RS', 'com.github.martianch.curieux.TestCoverage']
    }
}


